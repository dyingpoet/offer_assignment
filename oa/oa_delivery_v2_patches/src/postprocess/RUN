WORK_DIR=/home/jli21/sams/working_session/Oct2014/gec
#PYTHON=/home/jli21/lib/canopy/appdata/canopy-1.3.0.1715.rh5-x86_64/bin/python2.7

[ -d $WORK_DIR ] || mkdir -p $WORK_DIR

Database=pythia
CampaignNbr=406
CustomersPartition=2014-09-05
ScoreSource=GeC
ScoreType=rew
CAMPAIGN_TYPE=REWARD

backfill_ind=Y
backfill_reco_ind=Y
backfill_cluster_ind=N
backfill_threshold=2

oaFile=member_sc_cpn
OfferFile=/home/jli21/sams/data/pis/fia/sc_file/sc_offers_2014oct_input_v2.plain
fiaFile=$OfferFile

memberClusterFile=
recoClusterFile=
backfillClusterFile=../backfill.csv

recoScoreFile=${WORK_DIR}/oct_reco_cosine.sort
OAOutputTbl=offer_assignment_output
OAOutputLoc=/user/pythia/Workspaces/SamsMEP/offer_assignment_output
OApartition=2014sep
OutputCKP=offerAssignment_CKP_${OApartition}
OutputCKPnew=offerAssignment_CKP_${OApartition}"_new"
echo $OutputCKP

SamsMemberXrefTbl=customers.sams_us_clubs_member_xref
SamsMembershipDimTbl=customers.sams_us_clubs_sams_membership_dim
#SamsCardholderDimTbl=customers.sams_us_clubs_sams_mbr_cardholder_dim
SamsValueCouponDimTbl=sams_us_clubs.value_coupon_dim
SamsValueCouponItemDimTbl=sams_us_clubs.value_coupon_item_dim


cp -r *py *hql $WORK_DIR

pushd $WORK_DIR

python add_sc.py > member_sc_cpn

#echo $recoScoreFile

if [[ "$backfill_ind" == "Y" ]]
then
    if [[ "$CAMPAIGN_TYPE" == "REWARD" ]]
        echo "Reward scores to be backfilled!"
        if [[ "$backfill_reco_ind" == "Y" ]]
        then
            if [[ "$backfill_cluster_ind" == "Y" ]] 
            then
                ###pre-determined set, with clusters
                echo $backfill_cluster_ind
                echo "using reco +  pre-determined set with clusters"
                cat $recoScoreFile | python reco_backfill.py $oaFile $fiaFile $memberClusterFile $recoClusterFile  1>member_sc_cpn_reco_backfill 2>reco_fail_backfill
                cat member_sc_cpn member_sc_cpn_reco_backfill > member_sc_cpn_w_reco
                python default_backfill.py $fiaFile $memberClusterFile $recoClusterFile $backfillClusterFile member_sc_cpn_w_reco 1>member_sc_cpn_default_backfill 2>default_fail_backfill
                if [[ -s default_fail_backfill ]]; then echo "default backfilling failed for some members"; exit 1; else echo "default backfilling succeeded"; fi 
                cat member_sc_cpn_w_reco member_sc_cpn_default_backfill > member_sc_cpn_backfilled
                ### here assume that the cluster_level back-filling choices are enough. Not need popularity any more
            else
                ###popularity based, no clusters
                echo "using reco + popularity based backfills"
                cat $recoScoreFile | python reco_and_popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_reco_popularity_backfill 2>reco_popularity_fail_backfill
                if [[ -s reco_popularity_fail_backfill ]]; then echo "reco_popularity backfilling failed for some members"; exit 1; else echo "reco_popularity backfilling succeeded"; fi 
                cat member_sc_cpn member_sc_cpn_reco_popularity_backfill > member_sc_cpn_backfilled
            fi 
        else
            if [[ "$backfill_cluster_ind" == "Y" ]] 
            then
                ###pre-determined set, with clusters
                echo "only using pre-determined set with clusters"
                python default_backfill.py $fiaFile $memberClusterFile $recoClusterFile $backfillClusterFile member_sc_cpn 1>member_sc_cpn_default_backfill 2>default_fail_backfill
                if [[ -s default_fail_backfill ]]; then echo "default backfilling failed for some members"; exit 1; else echo "default backfilling succeeded"; fi 
                cat member_sc_cpn member_sc_cpn_default_backfill > member_sc_cpn_backfilled
            else
                ###popularity based, no clusters
                echo "only using popularity based backfills"
                python popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_popularity_backfill 2>popularity_fail_backfill
                if [[ -s popularity_fail_backfill ]]; then echo "popularity backfilling failed for some members"; exit 1; else echo "popularity backfilling succeeded"; fi 
                cat member_sc_cpn member_sc_cpn_popularity_backfill > member_sc_cpn_backfilled
            fi 
        fi
    else
        echo "Recommend scores to be backfilled!"
        ###popularity based, no clusters
        echo "only using popularity based backfills"
        python popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_popularity_backfill 2>popularity_fail_backfill
        if [[ -s popularity_fail_backfill ]]; then echo "popularity backfilling failed for some members"; exit 1; else echo "popularity backfilling succeeded"; fi 
        cat member_sc_cpn member_sc_cpn_popularity_backfill > member_sc_cpn_backfilled
    fi
    tr '_' ' ' < member_sc_cpn_backfilled > offerAssignment_member_decouple
else
    echo "no backfilling"
    tr '_' ' ' < member_sc_cpn > offerAssignment_member_decouple
fi



##hive -hiveconf OfferData=$OfferData -hiveconf OATable=$OATable -f create_offerAssignment.hql 
hadoop fs -put offerAssignment_member_decouple ${OAOutputLoc}/"campaign_month="${OApartition}"/offerAssignment_member_decouple"
hive -e "USE $Database; ALTER TABLE $OAOutputTbl ADD PARTITION(campaign_month='$OApartition');"
echo "USE $Database; ALTER TABLE $OAOutputTbl ADD PARTITION(campaign_month='$OApartition');"
#select * from offer_assignment_output where campaign_month='2014apr-gec' limit 10;
#select count(*) from offer_assignment_output where campaign_month='2014apr-gec' ; --1290441


##hive -hiveconf CustomersPartition=$CustomersPartition -hiveconf CampaignNbr=$CampaignNbr -hiveconf OATable=$OATable -f joinFields3.hql > tmp3
hive -hiveconf CustomersPartition=$CustomersPartition -hiveconf CampaignNbr=$CampaignNbr -hiveconf OATable=$OAOutputTbl -hiveconf OApartition=$OApartition \
    -hiveconf Database=$Database \
    -hiveconf SamsMemberXrefTbl=$SamsMemberXrefTbl \
    -hiveconf SamsMembershipDimTbl=$SamsMembershipDimTbl \
    -hiveconf SamsValueCouponDimTbl=$SamsValueCouponDimTbl \
    -hiveconf SamsValueCouponItemDimTbl=$SamsValueCouponItemDimTbl \
    -f joinFields5.hql > offerAssignment_CKP_temporary
cat offerAssignment_CKP_temporary | python generateCKP4.py $CampaignNbr $OfferFile > $OutputCKP
##wc -l tmp3 	2071585 tmp3
##python count_item.py 
##2071585


python appendScoreCoupon.py $OutputCKP $OfferFile scoreFile $ScoreSource $ScoreType > $OutputCKPnew


#yyyymmdd=20140328
#[ -d test ] || mkdir test
#tar -czvf test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz $OutputCKP
#gzip -c $OutputCKP > test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz 


