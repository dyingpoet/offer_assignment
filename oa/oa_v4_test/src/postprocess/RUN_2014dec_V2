WORK_DIR=/home/jli21/sams/working_session/Dec2014/gec-v2
#PYTHON=/home/jli21/lib/canopy/appdata/canopy-1.3.0.1715.rh5-x86_64/bin/python2.7

[ -d $WORK_DIR ] || mkdir -p $WORK_DIR

Database=pythia
CampaignNbr=427

export DS_RUN=2014-11-12
#export DS_RUN=`date +%Y-%m-%d`
echo "DS_RUN=${DS_RUN}"

export DT=`date -d "1 day ago ${DS_RUN}" +%Y-%m-%d`
export DATA_START_T=`date -d "1 year ago ${DS_RUN}" +%Y-%m-%d`
export DATA_END_T=${DT}
#export DS_OBSOLETE_DATE=${DT}
export DS_OBSOLETE_DATE=`date -d "3 days ago ${DS_RUN}" +%Y-%m-%d`
export DS_ITEM_MAPPING=${DT}
export DS_INVENTORY=${DT}
export MEMBERSHIP_DIM_PARTITION_DATE=${DT}

CustomersPartition=$MEMBERSHIP_DIM_PARTITION_DATE
ScoreSource=GeC
ScoreType=rew

backfill_ind=Y
backfill_reco_ind=Y
backfill_cluster_ind=N
backfill_threshold=2

oaFile=member_sc_cpn
OfferFile=/home/jli21/sams/data/pis/fia/sc_file/sc_offers_2014dec_input_v2.plain
fiaFile=$OfferFile

memberClusterFile=
recoClusterFile=
backfillClusterFile=

#recoScoreFile=${WORK_DIR}/oct_reco_cosine.sort
recoScoreFile=${WORK_DIR}/../dec_reco_cosine.sort
#OfferFile=/home/jli21/sams/oa_module/postprocess/offer_gec_rec_03172014.txt
#OfferFile=/home/jli21/sams/data/pis/fia/sc_file/sc_offers_2014sep_input.plain
#OfferFile=/home/jli21/sams/data/pis/fia/sc_file/sc_offers_2014jun_isd_v2.plain
OAOutputTbl=offer_assignment_output
OAOutputLoc=/user/pythia/Workspaces/SamsMEP/offer_assignment_output
OApartition=2014dec-v2
OutputCKP=offerAssignment_CKP_${OApartition}
OutputCKPnew=offerAssignment_CKP_${OApartition}"_new"
echo $OutputCKP

SamsMemberXrefTbl=customers.sams_us_clubs_member_xref
SamsMembershipDimTbl=customers.sams_us_clubs_sams_membership_dim
#SamsCardholderDimTbl=customers.sams_us_clubs_sams_mbr_cardholder_dim
SamsValueCouponDimTbl=sams_us_clubs.value_coupon_dim
SamsValueCouponItemDimTbl=sams_us_clubs.value_coupon_item_dim


# cp -r *py *hql $WORK_DIR

pushd $WORK_DIR


# python add_sc.py > member_sc_cpn
# 
# echo $recoScoreFile
# 
#  if [[ "$backfill_ind" == "Y" ]]
#  then
#      if [[ "$backfill_reco_ind" == "Y" ]]
#      then
#          if [[ "$backfill_cluster_ind" == "Y" ]] 
#          then
#              ###pre-determined set, with clusters
#              echo $backfill_cluster_ind
#              echo "using reco +  pre-determined set with clusters"
#              cat $recoScoreFile | python reco_backfill.py $oaFile $fiaFile $memberClusterFile $recoClusterFile  1>member_sc_cpn_reco_backfill 2>reco_fail_backfill
#              cat member_sc_cpn member_sc_cpn_reco_backfill > member_sc_cpn_w_reco
#              python default_backfill.py $fiaFile $memberClusterFile $recoClusterFile $backfillClusterFile member_sc_cpn_w_reco 1>member_sc_cpn_default_backfill 2>default_fail_backfill
#              if [[ -s default_fail_backfill ]]; then echo "default backfilling failed for some members"; exit 1; else echo "default backfilling succeeded"; fi 
#              cat member_sc_cpn_w_reco member_sc_cpn_default_backfill > member_sc_cpn_backfilled
#          else
#              ###popularity based, no clusters
#              echo "using reco + popularity based backfills"
#              cat $recoScoreFile | python reco_and_popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_reco_popularity_backfill 2>reco_popularity_fail_backfill
#              if [[ -s reco_popularity_fail_backfill ]]; then echo "reco_popularity backfilling failed for some members"; exit 1; else echo "reco_popularity backfilling succeeded"; fi 
#              cat member_sc_cpn member_sc_cpn_reco_popularity_backfill > member_sc_cpn_backfilled
#          fi 
#      else
#          if [[ "$backfill_cluster_ind" == "Y" ]] 
#          then
#              ###pre-determined set, with clusters
#              echo "only using pre-determined set with clusters"
#          else
#              ###popularity based, no clusters
#              echo "only using popularity based backfills"
#          fi 
#      fi
#  
#      tr '_' ' ' < member_sc_cpn_backfilled > offerAssignment_member_decouple
#  else
#      echo "no backfilling"
#      tr '_' ' ' < member_sc_cpn > offerAssignment_member_decouple
#  fi




# ##hive -hiveconf OfferData=$OfferData -hiveconf OATable=$OATable -f create_offerAssignment.hql 
# hadoop fs -put offerAssignment_member_decouple ${OAOutputLoc}/"campaign_month="${OApartition}"/offerAssignment_member_decouple"
# hive -e "USE $Database; ALTER TABLE $OAOutputTbl ADD PARTITION(campaign_month='$OApartition');"
# echo "USE $Database; ALTER TABLE $OAOutputTbl ADD PARTITION(campaign_month='$OApartition');"
# #select * from offer_assignment_output where campaign_month='2014apr-gec' limit 10;
# #select count(*) from offer_assignment_output where campaign_month='2014apr-gec' ; --1290441
#
# 
#  #hive -hiveconf CustomersPartition=$CustomersPartition -hiveconf CampaignNbr=$CampaignNbr -hiveconf OATable=$OATable -f joinFields3.hql > tmp3
#  hive -hiveconf CustomersPartition=$CustomersPartition -hiveconf CampaignNbr=$CampaignNbr -hiveconf OATable=$OAOutputTbl -hiveconf OApartition=$OApartition \
#      -hiveconf Database=$Database \
#      -hiveconf SamsMemberXrefTbl=$SamsMemberXrefTbl \
#      -hiveconf SamsMembershipDimTbl=$SamsMembershipDimTbl \
#      -hiveconf SamsValueCouponDimTbl=$SamsValueCouponDimTbl \
#      -hiveconf SamsValueCouponItemDimTbl=$SamsValueCouponItemDimTbl \
#      -f joinFields5.hql > offerAssignment_CKP_temporary
  cat offerAssignment_CKP_temporary | python generateCKP4.py $CampaignNbr $OfferFile > $OutputCKP
#  ##wc -l tmp3 	2071585 tmp3
#  ##python count_item.py 
#  ##2071585
# 
# 
 python appendScoreCoupon.py $OutputCKP $OfferFile scoreFile $ScoreSource $ScoreType > $OutputCKPnew
# ##python -m pdb appendScore_coupon.py $OutputCKP sc_offers_2014apr_gec  scoreFile GeC rec 


#yyyymmdd=20140328
#[ -d test ] || mkdir test
#tar -czvf test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz $OutputCKP
#gzip -c $OutputCKP > test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz 


