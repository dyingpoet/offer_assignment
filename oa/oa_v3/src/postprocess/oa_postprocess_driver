#PYTHON=/home/jli21/lib/canopy/appdata/canopy-1.3.0.1715.rh5-x86_64/bin/python2.7

set +e

[ -d $WORK_DIR ] || mkdir -p $WORK_DIR

echo "DS_RUN=${DS_RUN}"
echo $RECO_SCORE_FILE


oaFile=member_sc_cpn
memberClusterFile=memberClusterFile
recoClusterFile=recoClusterFile


CustomersPartition=$MEMBERSHIP_DIM_PARTITION_DATE
fiaFile=$OFFER_FILE

OUTPUT_CKP=offerAssignment_CKP_${OA_PARTITION}
OUTPUT_CKP_NEW=offerAssignment_CKP_${OA_PARTITION}"_new"
echo $OUTPUT_CKP_NEW



# cp -r *py *hql $WORK_DIR

pushd $WORK_DIR


#hadoop fs -cat ${CLUSTER_RECO_LOC}/* > recoClusterFile
#hadoop fs -cat ${CLUSTER_LABEL_LOC}/* > memberClusterFile
#
#if [[ "${CONTROL_SPLIT_IND}" = "Y" ]]; then 
#    python ${SRC_POSTPROCESS_PY_DIR}/add_sc.py sc_coupon_cnt_all offerAssignment > member_sc_cpn
#else
#    python ${SRC_POSTPROCESS_PY_DIR}/add_sc.py > member_sc_cpn
#fi

##if [[ $NO_QUALIFY_BACKFILL == 'Y' ]]; then
##    mv member_sc_cpn member_sc_cpn_qualify
##    python ${SRC_POSTPROCESS_PY_DIR}/no_qualify_backfill.py member_sc_cpn_qualify $WORK_DIR/sc_coupon_cnt $MEMBER_UB $CONFIG_FILE_PATH/memberTest 1>member_sc_cpn_no_qualify_backfill 2>member_sc_cpn_no_qualify_fail_backfill
##    cat member_sc_cpn_qualify member_sc_cpn_no_qualify_backfill > member_sc_cpn
##fi


#if [[ "$BACKFILL_IND" == "Y" ]]
#then
#    if [[ "$CAMPAIGN_TYPE" == "REWARD" ]]
#    then
#        echo "Reward scores to be backfilled!"
#        if [[ "$BACKFILL_RECO_IND" == "Y" ]]
#        then
#            if [[ "$BACKFILL_CLUSTER_IND" == "Y" ]] 
#            then
#                ###pre-determined set, with clusters
#                echo $backfill_cluster_ind
#                echo "using reco +  pre-determined set with clusters"
#                cat $RECO_SCORE_FILE | python ${SRC_POSTPROCESS_PY_DIR}/reco_backfill.py $oaFile $fiaFile $memberClusterFile $recoClusterFile  1>member_sc_cpn_reco_backfill 2>reco_fail_backfill
#                cat member_sc_cpn member_sc_cpn_reco_backfill > member_sc_cpn_w_reco
#                python ${SRC_POSTPROCESS_PY_DIR}/default_backfill.py $fiaFile $memberClusterFile $recoClusterFile $BACKFILL_CLUSTER_FILE member_sc_cpn_w_reco 1>member_sc_cpn_default_backfill 2>default_fail_backfill
#                if [[ -s default_fail_backfill ]]; then echo "default backfilling failed for some members"; exit 1; else echo "default backfilling succeeded"; fi 
#                cat member_sc_cpn_w_reco member_sc_cpn_default_backfill > member_sc_cpn_backfilled
#                ### here assume that the cluster_level back-filling choices are enough. Not need popularity any more
#            else
#                ###popularity based, no clusters
#                echo "using reco + popularity based backfills"
#                cat $RECO_SCORE_FILE | python ${SRC_POSTPROCESS_PY_DIR}/reco_and_popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_reco_popularity_backfill 2>reco_popularity_fail_backfill
#                if [[ -s reco_popularity_fail_backfill ]]; then echo "reco_popularity backfilling failed for some members"; exit 1; else echo "reco_popularity backfilling succeeded"; fi 
#                cat member_sc_cpn member_sc_cpn_reco_popularity_backfill > member_sc_cpn_backfilled
#            fi 
#        else
#            if [[ "$BACKFILL_CLUSTER_IND" == "Y" ]] 
#            then
#                ###pre-determined set, with clusters
#                echo "only using pre-determined set with clusters"
#                python ${SRC_POSTPROCESS_PY_DIR}/default_backfill.py $fiaFile $memberClusterFile $recoClusterFile $BACKFILL_CLUSTER_FILE member_sc_cpn 1>member_sc_cpn_default_backfill 2>default_fail_backfill
#                if [[ -s default_fail_backfill ]]; then echo "default backfilling failed for some members"; exit 1; else echo "default backfilling succeeded"; fi 
#                cat member_sc_cpn member_sc_cpn_default_backfill > member_sc_cpn_backfilled
#            else
#                ###popularity based, no clusters
#                echo "only using popularity based backfills"
#                python ${SRC_POSTPROCESS_PY_DIR}/popularity_no_cluster_backfill.py $oaFile $WORK_DIR/sc_coupon_cnt $MEMBER_UB 1>member_sc_cpn_popularity_backfill 2>popularity_fail_backfill
#                if [[ -s popularity_fail_backfill ]]; then echo "popularity backfilling failed for some members"; exit 1; else echo "popularity backfilling succeeded"; fi 
#                cat member_sc_cpn member_sc_cpn_popularity_backfill > member_sc_cpn_backfilled
#            fi 
#        fi
#    else
#        echo "Recommend scores to be backfilled!"
#        ###popularity based, no clusters
#        echo "only using popularity based backfills"
#        python ${SRC_POSTPROCESS_PY_DIR}/popularity_no_cluster_backfill.py $oaFile $fiaFile 1>member_sc_cpn_popularity_backfill 2>popularity_fail_backfill
#        if [[ -s popularity_fail_backfill ]]; then echo "popularity backfilling failed for some members"; exit 1; else echo "popularity backfilling succeeded"; fi 
#        cat member_sc_cpn member_sc_cpn_popularity_backfill > member_sc_cpn_backfilled
#    fi
#
#    if [[ $NO_QUALIFY_BACKFILL == 'Y' ]]; then
#        mv member_sc_cpn_backfilled member_sc_cpn_qualify
#        python ${SRC_POSTPROCESS_PY_DIR}/no_qualify_backfill.py member_sc_cpn_qualify $WORK_DIR/sc_coupon_cnt $MEMBER_UB $CONFIG_FILE_PATH/memberTest 1>member_sc_cpn_no_qualify_backfill 2>member_sc_cpn_no_qualify_fail_backfill
#        #python ${SRC_POSTPROCESS_PY_DIR}/no_qualify_backfill.py member_sc_cpn_qualify $WORK_DIR/sc_coupon_cnt_all $MEMBER_UB $CONFIG_FILE_PATH/memberTest 1>member_sc_cpn_no_qualify_backfill 2>member_sc_cpn_no_qualify_fail_backfill
#        cat member_sc_cpn_qualify member_sc_cpn_no_qualify_backfill > member_sc_cpn_backfilled
#    fi
#    tr '_' ' ' < member_sc_cpn_backfilled > offerAssignment_member_decouple
#else
#    echo "no backfilling"
#    tr '_' ' ' < member_sc_cpn > offerAssignment_member_decouple
#fi
#
#

hive -hiveconf OfferData=$OA_OUTPUT_LOC -hiveconf OATable=$OA_OUTPUT_TBL -f ${SRC_POSTPROCESS_HIVE_DIR}/create_offerAssignment.hql 

hadoop fs -put offerAssignment_member_decouple ${OA_OUTPUT_LOC}/"campaign_month="${OA_PARTITION}"/offerAssignment_member_decouple"

hive -e "USE $DATABASE; ALTER TABLE $OA_OUTPUT_TBL ADD PARTITION(campaign_month='$OA_PARTITION');"

echo "USE $DATABASE; ALTER TABLE $OA_OUTPUT_TBL ADD PARTITION(campaign_month='$OA_PARTITION'); is done."


hive -hiveconf CustomersPartition=$CustomersPartition -hiveconf CampaignNbr=$CAMPAIGN_NBR -hiveconf OATable=$OA_OUTPUT_TBL -hiveconf OApartition=$OA_PARTITION \
     -hiveconf Database=$DATABASE \
     -hiveconf SamsMemberXrefTbl=$SAMS_MEMBER_XREF_TBL \
     -hiveconf SamsMembershipDimTbl=$SAMS_MEMBERSHIP_DIM_TBL \
     -hiveconf SamsValueCouponDimTbl=$SAMS_VALUE_COUPON_DIM_TBL \
     -hiveconf SamsValueCouponItemDimTbl=$SAMS_VALUE_COUPON_ITEM_DIM_TBL \
     -f ${SRC_POSTPROCESS_HIVE_DIR}/joinFields5.hql > offerAssignment_CKP_temporary

echo "OFFER_FILE=${OFFER_FILE}"
cat offerAssignment_CKP_temporary | python ${SRC_POSTPROCESS_PY_DIR}/generateCKP4.py $CAMPAIGN_NBR $OFFER_FILE > $OUTPUT_CKP

python ${SRC_POSTPROCESS_PY_DIR}/appendScoreCoupon.py $OUTPUT_CKP $OFFER_FILE scoreFile $SCORE_SOURCE $SCORE_TYPE | sort | uniq | awk -F \| '{printf "%s|1|\n", $0}'> $OUTPUT_CKP_NEW


#yyyymmdd=20140328
#[ -d test ] || mkdir test
#tar -czvf test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz $OUTPUT_CKP
#gzip -c $OUTPUT_CKP > test/FI_SAMS_IEP_VMI_MBR_DETAILS_$yyyymmdd-1of1.txt.gz 


